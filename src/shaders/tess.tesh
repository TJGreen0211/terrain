#version 410
layout(triangles, equal_spacing, ccw) in;

in vec3 tcPosition[];
in vec3 tcNormal[];
in vec3 tcTangent[];
out vec2 longlat;
out vec3 tePosition;
out vec3 tePatchDistance;
out vec3 teNormal;
out vec3 teTangent;
out vec3 teN;
out vec3 teShadow;
out vec4 teLightSpace;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpace;

uniform sampler2D noiseTexture;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 getNormal(vec2 uv) {
	vec2 size = vec2(1.0,0.0);
	vec2 texelSize = 1.0 / textureSize(noiseTexture, 0);

	float p0 = texture(noiseTexture, vec2(uv.x, uv.y+texelSize.y)).x;
	float p1 = texture(noiseTexture, vec2(uv.x, uv.y-texelSize.y)).x;
	float p2 = texture(noiseTexture, vec2(uv.x+texelSize.x, uv.y)).x;
	float p3 = texture(noiseTexture, vec2(uv.x-texelSize.x, uv.y)).x;

	return cross(normalize(vec3(size.xy, p1-p0)), normalize(vec3(size.yx, p3-p2)));
}

void main()
{
	vec3 p0 = gl_TessCoord.x * tcPosition[0];
	vec3 p1 = gl_TessCoord.y * tcPosition[1];
	vec3 p2 = gl_TessCoord.z * tcPosition[2];

	tePosition = p0 + p1 + p2;
	teNormal = tePosition;
	longlat = vec2((atan(tePosition.x, tePosition.y) / 3.1415926 + 1.0) * 0.5,
                        (asin(tePosition.z) / 3.1415926 + 0.5));
	vec3 heightVec = (tePosition * vec3(texture(noiseTexture, longlat)).z)/11.0;

	tePatchDistance = gl_TessCoord;
	tePosition = vec3(tePosition.x+heightVec.x, tePosition.y+heightVec.y, tePosition.z+heightVec.z);

	gl_Position = vec4(tePosition, 1.0)*model*view*projection;
	teLightSpace = vec4(tePosition, 1.0)*model*lightSpace;
	teShadow = vec3(vec4(tePosition, 1.0)*model).xyz;
	teN = getNormal(longlat);
	teTangent = normalize(tcTangent[0] + tcTangent[1] + tcTangent[2]);
}
